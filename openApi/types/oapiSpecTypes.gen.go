// Package Types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Types

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RUQY/TPBD9K9Z837HbFnHLkRMr7SIkikBCHCbJJB2wx5Y9qVit+t+R43bTbSPYckDi",
	"1GTG8/LmvVc/QuNd8EKiCapHSM2WHI6PtCPR/BCiDxSVqZSlzT8tpSZyUPYCFWy2ZEhao+zI+M5ofs/z",
	"BpP5+O7289hJii7AAvQhEFTAotRThP0CBF1B/z9SBxX8t5porQ6cVkkjS3+PIU8kxajzRMbWH1LZP5V8",
	"/Y0azZ8apz+xbm/bvyQHj5j/okwjO1Zyv6VZ4jUBYYz4MOFMer8c7TAzg2lR+gF7Ko4NDqov0BLkBnxd",
	"AP1AF2yesDhtW4Qcx32DRblz+9Eq69COwJ2PDhUq6KxHnXBkcHXx78SE62x8FoiJF6d7ZLm0V+NAhoup",
	"R+6G0/jukMU4ImXpb+qBbZvBnsjW3ltCKaJds5v10l9x3O8oorV3J8r+So3z49ljVnvVv2EutEd1Xp5b",
	"e0rhLGYzSx3Ths6TUD3ErHUdcZCObHoevqk8k8FpkYsQFs0vU4sz5UsRcoml85cxervZvDeJ4o6i6Xwc",
	"4/OBgrJDQXOHyoLmDTbf8yV4MCR/6ngkhJu6dG+2qvke2VFMBXu9fLVcj5oFEgwMFbxerpdrWEBA3ea9",
	"9vufAQAA//9/uLrsngYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
