// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package Openapi

import (
	"fmt"
	"net/http"

	externalRef0 "SeptimanappBackend/types"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

const (
	App_idScopes = "app_id.Scopes"
)

// EventId defines model for eventId.
type EventId int

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	// if given only events of this year are returned
	Year *int `json:"year,omitempty"`
}

// PostEventsJSONBody defines parameters for PostEvents.
type PostEventsJSONBody externalRef0.Events

// PutEventsIdJSONBody defines parameters for PutEventsId.
type PutEventsIdJSONBody externalRef0.Event

// GetLocationsParams defines parameters for GetLocations.
type GetLocationsParams struct {
	// if given only locations of this overallLocation are returned
	OverallLocation *externalRef0.OverallLocation `json:"overallLocation,omitempty"`
}

// PostEventsJSONRequestBody defines body for PostEvents for application/json ContentType.
type PostEventsJSONRequestBody PostEventsJSONBody

// PutEventsIdJSONRequestBody defines body for PutEventsId for application/json ContentType.
type PutEventsIdJSONRequestBody PutEventsIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /events)
	GetEvents(ctx echo.Context, params GetEventsParams) error

	// (POST /events)
	PostEvents(ctx echo.Context) error

	// (DELETE /events/{id})
	DeleteEventsId(ctx echo.Context, id EventId) error

	// (GET /events/{id})
	GetEventsId(ctx echo.Context, id EventId) error

	// (PUT /events/{id})
	PutEventsId(ctx echo.Context, id EventId) error

	// (GET /locations)
	GetLocations(ctx echo.Context, params GetLocationsParams) error

	// (GET /locations/{id})
	GetLocationsId(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsParams
	// ------------- Optional query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, false, "year", ctx.QueryParams(), &params.Year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEvents(ctx, params)
	return err
}

// PostEvents converts echo context to params.
func (w *ServerInterfaceWrapper) PostEvents(ctx echo.Context) error {
	var err error

	ctx.Set(App_idScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEvents(ctx)
	return err
}

// DeleteEventsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEventsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id EventId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(App_idScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEventsId(ctx, id)
	return err
}

// GetEventsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id EventId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEventsId(ctx, id)
	return err
}

// PutEventsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutEventsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id EventId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(App_idScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutEventsId(ctx, id)
	return err
}

// GetLocations converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLocationsParams
	// ------------- Optional query parameter "overallLocation" -------------

	err = runtime.BindQueryParameter("form", true, false, "overallLocation", ctx.QueryParams(), &params.OverallLocation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter overallLocation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLocations(ctx, params)
	return err
}

// GetLocationsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocationsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLocationsId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/events", wrapper.GetEvents)
	router.POST(baseURL+"/events", wrapper.PostEvents)
	router.DELETE(baseURL+"/events/:id", wrapper.DeleteEventsId)
	router.GET(baseURL+"/events/:id", wrapper.GetEventsId)
	router.PUT(baseURL+"/events/:id", wrapper.PutEventsId)
	router.GET(baseURL+"/locations", wrapper.GetLocations)
	router.GET(baseURL+"/locations/:id", wrapper.GetLocationsId)

}
