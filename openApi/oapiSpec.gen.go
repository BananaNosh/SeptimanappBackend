// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "SeptimanappBackend/openApi/types"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RU30/bPhD/V6z7fh9DErqXLW9DmjYE0tDgDVWTl1ybG4lt7EtHVuV/ny4hKS2FMmlj",
	"T66bj8/3+XFeQ25rZw0aDpCtIWDeeOL2Mi+xxv4v7dxXKuRXgSH35JisgQzeX5yqG2wVW6UbLq2nn6g8",
	"3jYYOMQQAQnqtkHfQgRG1wiZFKMCIuDWDVs6wxa6rhP4wj6+5dPV1YUK6Ffo1cJ6xSWqS3RMtTZanWsm",
	"o9WJzm/Q9HWJKykcRohzR9+Gr0cls4MIVujDUDuNZ3EKXQTWodGOIIM3cRqnEIHTXPbsE1yN2iyRZbEO",
	"vZbuTgvI4CPyhwEhh7yukdEHyK53idBCLWmFRllTtWqoquxCcUlBtai90l7048YbLJ6QT3AQQRB3tDSD",
	"d7p2wniWHr+LoNZ3VDe1bGdpBDWZcXv8dhKdDOMSPXTdPAKPwVkTBqtnaSpLbg2j4XvzK8p7usn3IETW",
	"D27/3+MCMogTqRziVtfVf8kmUMmADKOGvc3bqgx8Q2/rQ01QTQ72tuuqUrKo4DCnBeW9ZENFZ8MeYy5s",
	"2DhzH8sTW7R/naDcRR4LyNg32B2UmPGOE1dp2rl7shY+n20mJrAns9wn5aVe4SCkCIKFmpqKprHuczkO",
	"9PW8m8vH++6TNRXd4ZyfFo+T3kdVRmaT1H7Kt6V4mNt/G8V98n3ZTaL6QVz222FuqZBjoldlhzaefRXO",
	"J9ArMdt09Qw7maMd4G+8WtPJ6eGyK/S6qkayL3nDdo5sPWcv5bpbo+vmW8YczPLkzh+N8zSc81f2/FCg",
	"R9wTme66XwEAAP//YbI7FAgIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./types.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
