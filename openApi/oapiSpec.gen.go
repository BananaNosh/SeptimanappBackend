// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "SeptimanappBackend/openApi/types"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SUT2/UPBDGv4o173t0k+xygRwrIajUQ0V7QxxMMtkMxH9qzy6NVv7uyDHZbJfSvUB7",
	"sqw8Hs/vmcfZQ2O1swYNB6j3UQKZzkK9hxZD48kxWQM1fLy7uxEB/Q696KwX3KO4RceklVHiWjEZJS5V",
	"8x1NCxKYeECoIcwS5y6+5q8XPbMDCTv0IdeuilVRQZRgHRrlCGp4U1RFBRKc4j71BSXufrUIG+S0WIde",
	"pe6uWqjhA/L7rEiHvNLI6APUn09BqBMb2qER1gyjyFWF7QT3FMSIygvlUXjkrTeYUCidut+iH0GCUTph",
	"JR1ICE2PWqVm8EFpl4jX1eqdBK0eSG912q4rCZrMvF29lcCjS0XIMG7QQ4xfJHgMzpqAE+G6qtLSWMNo",
	"Jljl3EDNhFt+Cwlkf3T7/x47qKEoU+VQjEoP/5XLXMusDLOHMUZ54krmDdNYjz1BcZjgNHY1DCItIjhs",
	"qKNmsixXdDY8MZgbG5bJeLzfYuBL247/DjB3k64ijy3U7LcYX93hW7XD7G/yCVuxSKOc413uqY3nM37V",
	"/p7yKabpuSwppRZOfTjO7OvG8CmPPp2mUPwg7qdtfrPUzn4NNrfx7B/h+iB6IbKlq2fo0ht6JHzEczYC",
	"B6i/moLAnszmBUMwA5/Lwaz7QxRi/BkAAP//DqJ1wsIGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./types.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
