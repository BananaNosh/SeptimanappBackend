// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "SeptimanappBackend/openApi/types"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8STT2/TQBDFv8pq4Li1nXABHyshqKhERXtDPSz2OB7w/unuJMSK9rujtbGThtBcoD2t",
	"Vh7Pzu+9NzuorHbWoOEA5S5KINNYKHdQY6g8OSZroISPd3c3IqDfoBeN9YJbFLfomLQySlwrJqPEpap+",
	"oKlBAhN3CCWEqcS5i2/j14uW2YGEDfow9i6yRVZAlGAdGuUISniTFVkBEpziNs0FOW5+jwgr5HRYh16l",
	"6a5qKOED8vuxIv3klUZGH6D8egxCjVjRBo2wpuvF2FXYRnBLQfSovFAehUdee4MJhdJfD2v0PUgwSies",
	"VAcSQtWiVmkY3CrtEvGyWLyToNWW9Fqn67KQoMlM18VbCdy71IQM4wo9xHgvwWNw1gQcCJdFkY7KGkYz",
	"wCrnOqoG3Px7SCC7g9dfe2yghCxPnUPWK929yve+5mNlmDSMMcojVUbeMNh6qAmK2cHBdtV1Ih0iOKyo",
	"oWqQbOzobDhhzI0Ne2c8Pqwx8KWt+/8OmN4ijzWU7NcYz0rMuOXcdYqO3p6thc+fYDYvsCezOiXlrdrg",
	"KGQSBGuxHyrKKcf5jup4PsxX9Z9xHvKY9mIfR6rhmPcwnC+bt1MafTmOm/hJ3A7XcTmpnvTq7DjGk6t/",
	"PRc9E9l+qifo0rI8KnzEczYCM9Q/TcEc3PtnlupcDqa6v0Qhxl8BAAD//xQQM2qrBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./types.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
